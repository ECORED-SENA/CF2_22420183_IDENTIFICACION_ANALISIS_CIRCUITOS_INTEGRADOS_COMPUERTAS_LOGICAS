{"remainingRequest":"/home/runner/work/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/node_modules/thread-loader/dist/cjs.js!/home/runner/work/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/node_modules/babel-loader/lib/index.js!/home/runner/work/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/runner/work/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/src/views/Tema2.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/runner/work/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/src/views/Tema2.vue","mtime":1740622116493},{"path":"/home/runner/work/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/babel.config.js","mtime":1740622116408},{"path":"/home/runner/work/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/CF2_22420183_IDENTIFICACION_ANALISIS_CIRCUITOS_INTEGRADOS_COMPUERTAS_LOGICAS/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdUZW1hMicsCiAgZGF0YTogKCkgPT4gKHsKICAgIC8vIHZhcmlhYmxlcyBkZSB2dWUKICB9KSwKICBtb3VudGVkKCkgewogICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICB0aGlzLiRhb3NSZWZyZXNoKCk7CiAgICB9KTsKICB9LAogIHVwZGF0ZWQoKSB7CiAgICB0aGlzLiRhb3NSZWZyZXNoKCk7CiAgfQp9Ow=="},{"version":3,"names":["name","data","mounted","$nextTick","$aosRefresh","updated"],"sources":["src/views/Tema2.vue"],"sourcesContent":["<template lang=\"pug\">\n.curso-main-container.pb-3\n  BannerInterno\n  .container.tarjeta.tarjeta--blanca.p-4.p-md-5.mb-5\n    .titulo-principal.color-acento-contenido(data-aos=\"flip-up\")\n      .titulo-principal__numero\n        span 2\n      h1 Sistema binario\n    .row.justify-content-center.mb-5.g-0\n      .col-lg-12.mb-lg-0.mb-3(data-aos=\"fade-down\")\n        .p-4(style=\"background-color: #F5E5FE \").h-100\n          .row.justify-content-center.align-items-center.mb-3\n            .col-lg.mb-lg-0.mb-3.order-2: p.mb-0 El sistema binario utiliza solo dos dígitos (0 y 1) para representar cualquier número. Es el sistema que se utiliza como lenguaje para los sistemas electrónicos, gracias a los dos estados o niveles lógicos que se encuentran en los circuitos integrados: abierto o cerrado (1 o 0 lógico).\n            .col-lg-auto.mb-lg-0.mb-3: img(src='@/assets/curso/temas/11.svg', alt='' style='width: 85px')\n    .row.justify-content-center.mb-5\n      .col-lg-10\n        .titulo-sexto.color-acento-contenido(data-aos='fade-right')\n          h5 Figura 1. \n          span #[i Niveles de voltaje en lógica digital]\n        img(src='@/assets/curso/temas/12.svg', alt='Texto alternativo: La imagen muestra los niveles de voltaje lógico en un sistema digital alimentado por VCC. Un nivel alto, representado como 1 - Lógico, se encuentra entre 3.5 V y 5.0 V. Entre 0.8 V y 3.5 V, el voltaje es No Definido, mientras que un nivel bajo, representado como 0 - Lógico, se encuentra entre 0.0 V y 0.8 V. ')(data-aos='fade-left')\n    p.mb-4(data-aos='fade-right') En la electrónica tradicional se usan 5 voltios para el dígito '1' y 0 voltios para el dígito '0'.\n    .tarjeta.p-5.mb-4(style=\"background-color: #D4F0E0 \")\n      p.mb-4(data-aos='fade-right') Ejemplo. Representar 2158 (decimal) en binario\n      .row.justify-content-center.mb-5\n        .col-lg-10\n          .titulo-sexto.color-acento-contenido(data-aos='fade-right')\n            h5 Figura 2. \n            span #[i Conversión de un número decimal a binario]\n          img(src='@/assets/curso/temas/13.svg', alt='Texto alternativo: La figura presenta un diagrama donde se convierte el número decimal 2158 a binario. El proceso muestra una serie de divisiones entre 2')(data-aos='fade-up')\n    .row.justify-content-center.mb-5\n      .col-lg-10(data-aos='fade-down')\n        .p-4(style=\"background-color: #E9F7EF\")\n          p.mb-4 El procedimiento para convertir un número decimal a binario utilizando divisiones sucesivas por 2 es el siguiente:\n          ol.lista-ol--cuadro\n            li.d-flex\n              .lista-ol--cuadro__vineta\n                span(style='color: #12263F; font-weight: bold') 1.\n              | Se divide el número decimal entre 2, obteniendo el cociente y el resto. El resto será uno de los dígitos del número binario.\n            li.d-flex\n              .lista-ol--cuadro__vineta\n                span(style='color: #12263F; font-weight: bold') 2.\n              | Si el resto es 0, se registra un 0 como dígito binario; si el resto es 1, se registra un 1.\n            li.d-flex\n              .lista-ol--cuadro__vineta\n                span(style='color: #12263F; font-weight: bold') 3.\n              | El cociente de la división se toma como el nuevo número decimal.\n            li.d-flex\n              .lista-ol--cuadro__vineta\n                span(style='color: #12263F; font-weight: bold') 4.\n              | Se repite el proceso dividiendo nuevamente por 2, registrando los restos como los dígitos binarios.\n            li.d-flex\n              .lista-ol--cuadro__vineta\n                span(style='color: #12263F; font-weight: bold') 5.\n              | El procedimiento finaliza cuando el cociente alcanza el valor de 0. Los restos obtenidos se leen de abajo hacia arriba para formar el número binario.\n    .row.justify-content-center.mb-5\n      .col-lg-4.mb-lg-0.mb-3(data-aos='fade-right')\n        .tarjeta.p-5.hover.h-100\n          .row.justify-content-center.align-items-center\n              .col-lg.mb-lg-0.mb-3.order-2: p.mb-0.fw-bold Divida el número decimal por 2.\n              .col-lg-auto.mb-lg-0.mb-3: img(src='@/assets/curso/temas/14.svg', alt='' style='width: 30px')\n      .col-lg-4.mb-lg-0.mb-3(data-aos='fade-up')\n        .tarjeta.p-5.hover.h-100\n          .row.justify-content-center.align-items-center\n              .col-lg.mb-lg-0.mb-3.order-2: p.mb-0.fw-bold Si hay resto, escriba 1; si no, 0.\n              .col-lg-auto.mb-lg-0.mb-3: img(src='@/assets/curso/temas/15.svg', alt='' style='width: 30px')\n      .col-lg-4.mb-lg-0.mb-3(data-aos='fade-down')\n        .tarjeta.p-5.hover.h-100\n          .row.justify-content-center.align-items-center\n              .col-lg.mb-lg-0.mb-3.order-2: p.mb-0.fw-bold Continúe hasta que no quede número decimal.\n              .col-lg-auto.mb-lg-0.mb-3: img(src='@/assets/curso/temas/16.svg', alt='' style='width: 30px')\n    .titulo-tres: h3 Álgebra de Boole\n    p.mb-4(data-aos='fade-right') El álgebra de Boole se utiliza para programar circuitos integrados a través de números binarios y realizar operaciones binarias. Esto permite predecir el comportamiento en la entrada y salida del circuito.\n      br\n      br\n      |Incluye tres operaciones fundamentales:\n      .row.justify-content-center.mb-5\n        .col-lg-10\n          .titulo-sexto.color-acento-contenido(data-aos='fade-right')\n            h5 Tabla 3. \n            span #[i Operaciones lógicas básicas]\n          .tabla-a.color-acento-contenido.mb-5(data-aos='fade-left')\n            table.text-center\n              thead(style=\"background-color: #F3F8FF \")\n                tr\n                  th Operación +\n                  th Operación  ⋅ o ∗\n                  th Operación de negación\n              tbody.bg-white\n                tr\n                  td (Es el mismo símbolo de la suma que usualmente usamos, pero no es la misma operación)\n                  td (Es el mismo símbolo del producto o multiplicación que usualmente usamos, pero no es la misma operación)\n                  td (Permite invertir o negar el estado lógico, #[em bit] o dígito así)\n                tr\n                  td Entradas | Salida\n                  td Entradas | Salida\n                  td Entradas | Salida\n                tr\n                  td A + B = C\n                    br\n                    br\n                    |0 + 0 = 0\n                    br\n                    br\n                    |0 + 1 = 1\n                    br\n                    br\n                    |1 + 0 = 1\n                    br\n                    br\n                    |1 + 1 = 1\n                  td A · B = C\n                    br\n                    br\n                    |0 · 0 = 0\n                    br\n                    br\n                    |0 · 1 = 0\n                    br\n                    br\n                    |1 · 0 = 0\n                    br\n                    br\n                    |1 · 1 = 1\n                  td A = A\n                    br\n                    br\n                    |0 = 1\n                    br\n                    br\n                    |1 = 0\n    .row.justify-content-center.mb-5\n      .col-lg-10(data-aos='fade-down')\n        .tarjeta.p-4(style=\"background-color: #496D58 \")\n          .row.justify-content-center\n            .col-lg-10.mb-lg-0.mb-3.order-2\n              .text-white\n                h4 Dato importante\n                p.mb-0 La negación se expresa con una línea arriba del nombre asignado a la entrada o a la salida o con una comilla, así: A = A'\n            .col-lg-auto.mb-lg-0.mb-3: img(src='@/assets/curso/temas/17.svg', alt='' style='width: 100px') \n    .titulo-tres: h3 Función lógica\n    p.mb-4(data-aos='fade-right') Es la expresión algebraica formada por variables binarias que se relacionan mediante las operaciones básicas del álgebra de Boole.\n    .row.justify-content-center.mb-5\n      .col-lg-10.mb-lg-0.mb-3(data-aos='fade-left')\n        .tarjeta.p-4(style=\"background-color: #D4F0E0 \")\n          .row.justify-content-center.mb-3\n            .col-lg-10.mb-lg-0.mb-3.order-2\n              p.mb-0 #[b Ejemplo:]\n                br\n                |F = a + b (la función sería “a + b” que equivale a la operación booleana “+” o de suma).\n                br\n                |Donde a y b son las variables binarias.\n            .col-lg-auto.mb-lg-0.mb-3: img(src='@/assets/curso/temas/7.svg', alt='' style='width: 100px') \n    .titulo-tres: h3 Tabla de verdad\n    p.mb-4(data-aos='fade-right') Es una representación gráfica de todos los valores que puede tomar la función lógica para cada una de las posibles combinaciones de las variables de entrada.\n    .row.justify-content-center.mb-5\n      .col-lg-10.mb-lg-0.mb-3(data-aos='fade-down')\n        .tarjeta.p-4(style=\"background-color: #D4F0E0 \")\n          .row.justify-content-center.mb-3\n            .col-lg-10.mb-lg-0.mb-3.order-2\n              p.mb-0 El número de combinaciones posibles es 2^n, siendo n el número de variables.\n                br\n                br\n                | #[b Ejemplo:] la tabla para la función lógica F = (A + B) · C sería:\n                br\n                |n = 3 (porque las variables son A, B y C).\n                br\n                |23 = 8 (número de posibles combinaciones y filas que debe tener la tabla).\n            .col-lg-auto.mb-lg-0.mb-3: img(src='@/assets/curso/temas/7.svg', alt='' style='width: 100px') \n    p.mb-4(data-aos='fade-right') El álgebra de Boole se basa en un conjunto de propiedades y reglas fundamentales que permiten simplificar y analizar expresiones lógicas. Estas reglas son esenciales para optimizar circuitos y resolver problemas lógicos de manera estructurada. A continuación, se presentan las principales propiedades y ejemplos asociados:\n    .row.justify-content-center.mb-4.mb-lg-0\n      .col-lg-7.mb-lg-0\n        .titulo-sexto.color-acento-contenido(data-aos='fade-right')\n          h5 Tabla 4.\n          span #[i Las 8 posibles combinaciones]\n        .tabla-a.color-acento-contenido.mb-5(data-aos='fade-down')\n          table.text-center\n            thead(style=\"background-color: #F3F8FF \")\n              tr\n                th(style=\"width: 100px \") Variables o entrada\n                th(style=\"width: 100px \") Función lógica o salida\n            tbody.bg-white\n              \n              tr\n                td A B C\n                td F = (A + B) · C\n              tr\n                td 0 0 0\n                td 0\n              tr\n                td 0 0 1\n                td 0\n              tr\n                td 0 1 0\n                td 0\n              tr\n                td 0 1 1\n                td 1\n              tr\n                td 1 0 0\n                td 0\n              tr\n                td 1 0 1\n                td 1\n              tr\n                td 1 1 0\n                td 0\n              tr\n                td 1 1 1\n                td 1\n      .col-lg-4.col-7: img(src='@/assets/curso/temas/18.png', alt='')\n    p.mb-4(data-aos='fade-right') El álgebra de Boole se basa en un conjunto de propiedades y reglas fundamentales que permiten simplificar y analizar expresiones lógicas. Estas reglas son esenciales para optimizar circuitos y resolver problemas lógicos de manera estructurada. A continuación, se presentan las principales propiedades y ejemplos asociados.\n    .row.justify-content-center\n      .col-lg-7.mb-lg-0\n        .titulo-sexto.color-acento-contenido(data-aos='fade-right')\n          h5 Tabla 5.\n          span #[i Propiedades o reglas del álgebra de Boole]\n        .tabla-a.color-acento-contenido.mb-5(data-aos='fade-down')\n          table.text-center\n            thead(style=\"background-color: #F3F8FF \")\n              tr\n                th(style=\"width: 100px \") Propiedad o regla\n                th(style=\"width: 100px \") Ejemplo\n            tbody.bg-white\n              \n              tr\n                td Simplificación de negación\n                td A = A\n              tr\n                td Simplificación de igualdad\n                td A + A = A\n                  br\n                  |A · A = A\n              tr\n                td Inversa\n                td A + A = 1\n                  br\n                  |A · A = 0\n              tr\n                td Identidad\n                td A + 0 = A\n                  br\n                  |A · 1 = A\n                  br\n                  |A + 1 = 1\n                  br\n                  |A · 0 = 0\n              tr\n                td Conmutativa\n                td A + B = B + A\n                  br\n                  |A · B = B · A\n              tr\n                td Asociativa\n                td A + (B + C) = (A + B) + C\n                  br\n                  |A · (B · C) = (A · B) · C\n              tr\n                td Distributiva\n                td A · (B + C) = (A · B) + (A · C)\n                  br\n                  |(A + B) · C = (A · C) + (B · C)\n              tr\n                td Más reglas de simplificación o leyes de absorción\n                td A + A · B = A\n                  br\n                  |A · (A + B) = A\n              tr\n                td Teorema de Morgan\n                td A · B ) = A´ + B´\n                  br\n                  |A · B )= A´ · B´\n      .col-lg-3.col-7: img(src='@/assets/curso/temas/19.png', alt='')\n\n</template>\n\n<script>\nexport default {\n  name: 'Tema2',\n  data: () => ({\n    // variables de vue\n  }),\n  mounted() {\n    this.$nextTick(() => {\n      this.$aosRefresh()\n    })\n  },\n  updated() {\n    this.$aosRefresh()\n  },\n}\n</script>\n\n<style lang=\"sass\"></style>\n"],"mappings":"AAoRA;EACAA,IAAA;EACAC,IAAA,EAAAA,CAAA;IACA;EAAA,CACA;EACAC,QAAA;IACA,KAAAC,SAAA;MACA,KAAAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAD,WAAA;EACA;AACA","ignoreList":[]}]}